#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 7.0
#  in conjunction with Tcl version 8.6
#    Apr 05, 2022 04:38:46 PM CEST  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import time
import threading
from turtle import back
import PillaLeed_Main_2
import numpy as np
from PIL import ImageTk, Image
import OCI_driver as LEED_driver

from matplotlib.backends.backend_tkagg import (
    FigureCanvasTkAgg, NavigationToolbar2Tk)
# Implement the default Matplotlib key bindings.
from matplotlib.backend_bases import key_press_handler
from matplotlib.figure import Figure
from matplotlib import pyplot as plt
import matplotlib.animation as animation
import Camera_Communication as myCamlib
from pathlib import Path

saveDirectory = 'C:\\Users\\Philipp\\Desktop\\temp'


def main(*args):
    '''Main entry point for the application.'''
    global root
    root = tk.Tk()
    root.protocol( 'WM_DELETE_WINDOW' , root.destroy)
    # Creates a toplevel widget.
    global _top1, _w1
    _top1 = root
    _w1 = PillaLeed_Main_2.PillaLEED(_top1)

    global allframes, ValueDisplayFields,ValueEntryFields, ValueLabels, colordict
    allframes = [_w1.CamFrame,_w1.RandomPicFrame,_w1.Profileframe,_w1.IVzoomframe,_w1.IVFrame]
    ValueEntryFields = [_w1.Valentry1,_w1.Valentry2,_w1.Valentry3,_w1.Valentry4,_w1.Valentry5,_w1.Valentry6,_w1.Valentry7,_w1.Valentry8,_w1.Valentry9,_w1.Valentry10,_w1.Valentry11,_w1.Valentry12]
    ValueDisplayFields = [_w1.Valdisp1,_w1.Valdisp2,_w1.Valdisp3,_w1.Valdisp4,_w1.Valdisp5,_w1.Valdisp6,_w1.Valdisp7,_w1.Valdisp8,_w1.Valdisp9,_w1.Valdisp10,_w1.Valdisp11,_w1.Valdisp12]
    ValueLabels = [_w1.Setvalnm1,_w1.Setvalnm2,_w1.Setvalnm3,_w1.Setvalnm4,_w1.Setvalnm5,_w1.Setvalnm6,_w1.Setvalnm7,_w1.Setvalnm8,_w1.Setvalnm9,_w1.Setvalnm10,_w1.Setvalnm11,_w1.Setvalnm12]
    colordict = {
        "darkred" : "#804040",
        "redpurple" : "#9b2057" ,
        "coolgreen" : "#008080",
        "standardgrey" : '#d9d9d9',
        "darkgrey" : '#615a5a',
        'alarmred' : '#d70428',
    }

    global myCamera, myLEED, running, LEEDOptions
    #************Initialize the Camera***************************************************
    global camMode # we define the cam Modes "whitenoise","live","static"
    myCamera = myCamlib.myCamera('comx')
    error = myCamera.connect()
    if not error:
        camMode = 1
    else: 
        camMode = 0
    # ***********Initialize the LEED***************************************************
    com = 'com5'
    baud = '9600'
    myLEED = LEED_driver.myLEED(baud,com)

    LEEDOptions = myLEED.give_settings()
    for i,key in enumerate(LEEDOptions.keys()):
        ValueLabels[i].configure(text=key)

    # Other stuff
    initializenewrandompic()
    embeddGraphics()
    #Creat background update
    running = True
    backgroundtask = threading.Thread(target=BackgroundUpdate)
    backgroundtask.start()
    root.mainloop()
    running=False

def OpenWorkingFile():
    #open working file here
    print('opening a working file')

def getCWDinfo():
    user = _w1.Username.get()
    if user == '':
        user = 'MusterCat'
    sample = _w1.samplename.get()
    if sample == '':
        sample = 'Banana'
    cwd = saveDirectory+'\\'+user+'\\'+sample+'\\'
    comments = _w1.Comment.get()
    ret = {
        'user' : user,
        'sample' : sample,
        'cwd' : cwd,
        'comments' : comments
    }
    Path(ret['cwd'] ).mkdir(parents=True, exist_ok=True)                            # create the cwd if non-existent
    return ret

def embeddGraphics():                                                               # function embedding the Mathplotlib-graphics and starting the background threads
    global fig,subplot,ax,t,canvas,ani, toolbar
    fig = plt.figure(num=1,figsize=(1,1), dpi=100)
    if camMode==1:
        a = myCamera.getGreyscale() #
    else:
        a = np.random.randint(0, 100, (256, 256))
    #subplot = fig.add_subplot(111)
    ax = plt.Axes(fig, [0., 0., 1., 1.])
    ax.set_axis_off()
    fig.add_axes(ax)
    ax.imshow(a)
    canvas = FigureCanvasTkAgg(fig, master=_w1.CamFrame)  # A tk.DrawingArea. 
    canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)
    canvas.draw()
    ani = animation.FuncAnimation(fig, updateGraphics, interval=100)

def updateGraphics(fig):
    if camMode==1:
        a = a = myCamera.getGreyscale()#np.random.randint(0, 100, (256, 256))
        ax.clear()
        ax.set_axis_off()
        ax.imshow(a)
        canvas.draw()
    elif camMode==0:
        a=1

def BackgroundUpdate():
    while running:
        time.sleep(1)
        #print("aiaiaiai")



def ChangeAStatus(what,whatto,color):
    if what=='LEED':
        widget = _w1.LEED_status
    elif what=='IV':
        widget = _w1.IV_Status

    if color in colordict.keys():
        widget.configure(background=colordict[color])
    else:
        print("This status color does not exist")
        widget.configure(background=colordict['standardgrey'])
    widget.configure(text=whatto)

def CamBackTolive(*args):
    print('PillaLeed_Main_2_support.CamBackTolive')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()
    global camMode
    camMode=1

def DeleteMarks(*args):
    print('PillaLeed_Main_2_support.DeleteMarks')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def EndLEED(*args):
    print('LEED Shutdown')
    ChangeAStatus('LEED','LEED is off', 'darkgrey')




def GO_IV(*args):
    print('PillaLeed_Main_2_support.GO_IV')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def IV_Autotrack(*args):
    print('PillaLeed_Main_2_support.IV_Autotrack')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def LoadAIV(*args):
    print('PillaLeed_Main_2_support.LoadAIV')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()
    global camMode
    camMode = 0

def LoadLastIV(*args):
    print('PillaLeed_Main_2_support.LoadLastIV')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()
    global camMode
    camMode = 0

def LoadLastLEED(*args):
    print('PillaLeed_Main_2_support.LoadLastLEED')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()
    global camMode
    camMode = 0

def LoadProfile(*args):
    print('PillaLeed_Main_2_support.LoadProfile')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def LoadotherLEED(*args):
    print('PillaLeed_Main_2_support.LoadotherLEED')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()
    global camMode
    camMode = 0

def MarkSpot(*args):
    print('PillaLeed_Main_2_support.MarkSpot')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def MarkSpotgroup(*args):
    print('PillaLeed_Main_2_support.MarkSpotgroup')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def SaveProfile(*args):
    print('PillaLeed_Main_2_support.SaveProfile')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def Select_Cam(*args):
    print('PillaLeed_Main_2_support.Select_Cam')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def Select_Ctrl(*args):
    print('PillaLeed_Main_2_support.Select_Ctrl')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def StartLEED(*args):
    print('PillaLeed_Main_2_support.StartLEED')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def brightmin(*args):
    print('PillaLeed_Main_2_support.brightmin')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def brightplus(*args):
    print('PillaLeed_Main_2_support.brightplus')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def cheese(*args):
    print('PillaLeed_Main_2_support.cheese')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()
    # safe a file to hdf5 and to .png
    cwdinfo = getCWDinfo()
    pictureData, error = myCamera.getHighResolution()
    
    if not error:
        plt.imsave(cwdinfo['cwd'] + 'test.png', pictureData, cmap=plt.cm.jet)

    print(cwdinfo)

def dfromspots(*args):
    print('PillaLeed_Main_2_support.dfromspots')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def initializenewrandompic():
    name=str(int(np.random.randint(1,9)))
    img = tk.PhotoImage(file='.\\pics\\'+name+'.png')
    #img = tk.PhotoImage(file='.\\pics\\profilepic_small.png')
    _w1.Infographic = tk.Label(_w1.RandomPicFrame,image=img)
    _w1.Infographic.photo = img
    _w1.Infographic.pack()


def newrandompic(*args):
    name=str(int(np.random.randint(1,9)))
    img = tk.PhotoImage(file='.\\pics\\'+name+'.png')
    _w1.Infographic.configure(image=img)
    _w1.Infographic.photo = img
    #_w1.Infographic.pack()

def savenewdref(*args):
    print('PillaLeed_Main_2_support.savenewdref')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def set1(*args):
    print('PillaLeed_Main_2_support.set1')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def set10(*args):
    print('PillaLeed_Main_2_support.set10')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def set11(*args):
    print('PillaLeed_Main_2_support.set11')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def set12(*args):
    print('PillaLeed_Main_2_support.set12')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def set2(*args):
    print('PillaLeed_Main_2_support.set2')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def set3(*args):
    print('PillaLeed_Main_2_support.set3')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def set4(*args):
    print('PillaLeed_Main_2_support.set4')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def set5(*args):
    print('PillaLeed_Main_2_support.set5')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def set6(*args):
    print('PillaLeed_Main_2_support.set6')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def set7(*args):
    print('PillaLeed_Main_2_support.set7')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def set8(*args):
    print('PillaLeed_Main_2_support.set8')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

def set9(*args):
    print('PillaLeed_Main_2_support.set9')
    for arg in args:
        print ('another arg:', arg)
    sys.stdout.flush()

if __name__ == '__main__':
    PillaLeed_Main_2.start_up()




